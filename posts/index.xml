<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on /home/kiennt</title>
    <link>/blog/posts/</link>
    <description>Recent content in Posts on /home/kiennt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Sep 2018 11:25:36 +0700</lastBuildDate>
    
        <atom:link href="/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang: Block forever</title>
      <link>/blog/posts/golang-block-forever/</link>
      <pubDate>Mon, 27 Apr 2020 15:59:21 +0700</pubDate>
      
      <guid>/blog/posts/golang-block-forever/</guid>
      <description>Sometimes, you want to block the current goroutine when allowing others to continue. Here is some tricks I&amp;rsquo;ve collected:
References Firstly give them some credits:
 https://blog.sgmansfield.com/2016/06/how-to-block-forever-in-go/ https://pliutau.com/different-ways-to-block-go-runtime-forever/   NOTE: I run these with Golang 1.12
 The original package main import &amp;#34;fmt&amp;#34; func show() { for i := 1; i &amp;lt; 9696969; i++ { time.Sleep(1000) fmt.Println(i) } } func main() { go show() // The main goroutine is exited before the show() be done.</description>
      
    </item>
    
    <item>
      <title>Rest In Peace Kobe Bryant</title>
      <link>/blog/posts/rip-kobe-bryant/</link>
      <pubDate>Mon, 27 Jan 2020 22:15:07 +0700</pubDate>
      
      <guid>/blog/posts/rip-kobe-bryant/</guid>
      <description>Source: The Undefeated
I am not Kobe fan honestly but just like him, basketball is something I love. I hope he&amp;rsquo;s at peace because although his journey in life is over, the legacy he left behind is etched in all our souls.
Rest In Peace Mamba üèÄ</description>
      
    </item>
    
    <item>
      <title>Blog Guideline</title>
      <link>/blog/posts/blog-guideline/</link>
      <pubDate>Thu, 22 Aug 2019 14:40:59 +0700</pubDate>
      
      <guid>/blog/posts/blog-guideline/</guid>
      <description>In the beginning, I supposed that I&amp;rsquo;m the only one who write-up thing in this blog. But now thing was change, this blog might have multiple bloggers. So it needs a guideline to describe how to contribute.

1. How to submit a new content  Here is the source repo. Fork it &amp;amp; start writing. Create a pull request to submit your content. Make sure to create your author page.</description>
      
    </item>
    
    <item>
      <title>Openstack Autoscaling New Approach</title>
      <link>/blog/posts/openstack-autoscaling-new-approach/</link>
      <pubDate>Mon, 19 Aug 2019 21:19:38 +0700</pubDate>
      
      <guid>/blog/posts/openstack-autoscaling-new-approach/</guid>
      <description>NOTE(kiennt): There is a legacy Faythe guideline. The new version is coming soon, check its repository for status.
 This guide describes how to automatically scale out your Compute instances in response to heavy system usage. By combining with Prometheus pre-defined rules that consider factors such as CPU or memory usage, you can configure OpenStack Orchestration (Heat) to add and remove additional instances automatically, when they are needed.
1. The standard OpenStack Autoscaling approach Let&amp;rsquo;s talk about the standard OpenStack Autoscaling approach before goes to the new approach.</description>
      
    </item>
    
    <item>
      <title>M·ª•c ti√™u 2019</title>
      <link>/blog/posts/target-2019/</link>
      <pubDate>Mon, 04 Feb 2019 23:16:47 +0700</pubDate>
      
      <guid>/blog/posts/target-2019/</guid>
      <description>ƒê·∫øn h·∫πn l·∫°i l√™n, th·ªùi ƒëi·ªÉm T·∫øt ƒë·∫øn xu√¢n v·ªÅ, tui l·∫°i ng·ªìi copy &amp;amp; paste vi·∫øt m·ª•c ti√™u ph·∫•n ƒë·∫•u cho nƒÉm m·ªõi. Tui kh√° l√† l∆∞·ªùi v√† d·ªÖ xao nh√£ng n√™n vi·ªác vi·∫øt l√™n c√°c m·ª•c ti√™u nƒÉm m·ªõi ƒë∆°n gi·∫£n l√† m·ªôt c√°ch t·ª± th√∫c √©p b·∫£n th√¢n. &amp;ldquo;M√†y ƒë√£ vi·∫øt ra nh·ªØng ƒëi·ªÅu n√†y, c·ªë m√† l√†m&amp;rdquo;, ki·ªÉu v·∫≠y. √Ä khoan, hay kh√¥ng vi·∫øt n·ªØa nh·ªâ? L∆∞·ªùi qu√°&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lets Comment</title>
      <link>/blog/posts/lets-comment/</link>
      <pubDate>Tue, 02 Oct 2018 09:47:11 +0700</pubDate>
      
      <guid>/blog/posts/lets-comment/</guid>
      <description>Hugo ships with support for Disqus, a third-party service that provides comment and community capabilities to websites via JavaScript. But Disqus generates a shit load of page requests and heavy contents&amp;hellip; which even with the benefits that come with having Disqus in place. People just want something that can be used to post a comment, that is.
That&amp;rsquo;s why I choose a Disqus alternative - Utterances. Utterances is a lightweight comments widget built on Github issues.</description>
      
    </item>
    
  </channel>
</rss>
